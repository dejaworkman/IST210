# -*- coding: utf-8 -*-
"""Group Project Notebook 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dGmRalfcCS-_lQiopismEl1tLQOg10u6
"""



"""##Concept: Car dealership

Our first concept is a car dealership. A car dealership providess an interesting and unique model due to the fact that the dealership purchases items which they wish to sell, yet do so at negligible profit margin.  Cars are one of the only items where a retailer sells to a consumer at no direct profit (due to the interest they pay on the vehicle, operating expenses, and stiff competition).  For all intents and purposes, we can call this a new business, but the model used is relatively common.  The goal of this database is to allow the dealership to analyze their sales and then prioritize orders of units that sell consistently and in the shortest amounts of time.



**Vehicle Details:**
Vehicle details tells you all important upfront information about each vehicle in inventory. It, like all the other tables uses VIN as a primary key.  VIN makes a perfect primary key because every car has one and they are all unique.  VIN can be pretty much any string of 17 alphanumeric characters.  The table then displays the attributes, make, model, year, mileage, options package, and retail (sticker) price.  Make and model are relatively self explanatory.  Year and mileage are useful because they are important.  With certain years come different features and greatly affect the value of the car.  Like year, mileage also is a big factor in depreciation.  Options Package provides for tracking of which options are desireable and thus which should be ordered on future inventory.

**Vehicle Location**
Each vehicle (identified by VIN) occupies a spot in a lot or showroom.  This table has several key constraints.  Firstly, we are going to say that the dealer has 4 lots, so each instance can only be filled with the letters a-d.  There are a finite number of spots per lot, thus each instance can only be filled with a number equal to the maximum number of spots.  Spots cannot be repeated (VIN to spot number is a 1 to 1 relationship) thus making spot number a relatively useful secondary key (eg. is there a VW in lot A spot 5?). 

**Bank Payments**
Vehicles are bought on credit.  Thus, every car has interest that has to be paid on it.  That is why turnover on inventory is important.  If a car sits on the lot for 6 months, that is 6 months of compounding interest payments that have to be made.  Thus, this table provides information such as date purchased, amount purchased for, number of payments remaining, net value left to be paid, interest rate, so on and so forth. Net value left to be paid can be calculated from , amount purchased for, payments remaining, and interest rate.

**Orders**
Dealers purchase inventory from manufacturers.  The key objective of this database is to order units in a way to match demand effectively, and not lost money due to interest and then also the opportunity cost of having a unit that won't sell.   Thus, this table shows the attributes, make, model, arrival date and date purchased, again using VIN to identify each vehicle along with a unique order number.  

**Sales (Responsive)**
This is our responsive component.  This table tracks live sales numbers. It uses VIN and sale number to uniquely id instances, (ref. now past units in vehicle details), final sale price, buyer and sale date.  Using what vehicles have been sold and when allows for basic math operations to display say count of "x" type of vehicle sold in a given time window.


##Concept: Airport

Our second idea was for the structure of a standard airport. For this idea to properly come into fruition, the coneceptual airport needs to be of moderate size as extremeeties could upset the construction of the tables. For example, we're assuming that the airport has more than one flight per day, more than one terminal, more than one pilot, and actually has customers. In this example we are only creating tables that are directly connected to flights--for example, we will not be including airport food sales. The tables we feel best suited for this concept are described below:


**Flights-**
The Flight Table will give you information about the trip or journey taken by the planes and people. The key included would be Flight number, plane number, origin, destination, time departure, and time arrival. The flight number in this table would constitue as the primary key as it would not be reused or shared with any other trip. The plane number is the primary key in the Plane table, which identifies the physical plane rather than the route/trip that it is taking which is found here in this table. Origin is the beginning of the trip, destination is the end. Time departure is when the trip is set to start and time arrival is when the trip is set to end.


**Planes-**
The Planes Table will give details about the actual, physical aircraft itself and not where it's going. Its primary key is the Plane Number, unshared and specific to each one. The make and model would be similar to that of a car actually--an example of a plane's make and model would be the Boeing 737. Mileage, once again, similarly to that of a car, would be how many miles the pllane has flown over its lifetime. The service history key would hold a number that tells you how many maintenance tasks it has had perfromed on it in its lifetime.


**Passengers-**
The Passengers Table contains information about the people riding the planes. This will include full name, their aisle and seat number on their earliest upcoming/current flight, the flight number (primary key of the Flights table), their assigned boarding group for their earliest upcoming/current flight, and the number of bags they are traveing with.

**Flight Staff-**
The Flight Staff Table would have information for the employees who work aboard the plane. It will include their full name, their employee ID (primary key), job or responsibility (i.e. pilot), and flight number for the plane they are currently assigned to work on.

**Live Metrics-**
The Live Metrics Table will update actively to show various pieces of valuable infomration pertaining to the data that the airport is producing. This tracked data would include, the number of flights landing within next hour, the number of flights departing within next hour, the number of of planes on runway, the number  of passengers in the airport. 


##Concept: HUB Cafeteria

Our last idea is based around the HUB dining experience. Since this is a specific and concretely defined creation point as far as data is concerned, the tables have already formed themselves really. In this concept we've included items, people, places, and things that we see in the scene already. This will be an interesting database because the example we're using is very specific. In this example we are pretending that the only customers are students. The tables below correlate to this concept:

**Student-**
The students are the buyers. The primary key in this table is their student ID, which is already assigned to every student and unshared. There first and last name offer further identification as well. Next we will see their classification as determined by their time spent/ credits earned at Penn State. Then finally their email adress. Just a few basic and standard details about the customer.


**Purchases:**
Next we have doumentation for the transaction or purchase itself. Here we will find the PSU ID of the student making the purchase, the barcode for the item they buy, the store they purchased it from, and the item's weight.


**Items:**
We have also the items table, an in depth catalog of all the items being sold along with their information. This includes the ItemID, price, and place of purchase.


**Staff:**
The Staff Table hosts information for the employees at the HUB cafeteria, who are also students. The table will include the employee's full name, student ID, location of work, pay rate, job, and average hours worked weekly.



**Specials:**

We've added a table to monitor sales and sale prices at the Hub Cafe as well. This will host the ItemIDs coresponding to the items that are on sale or being offered soecially and when.
"""